plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'pmd'
    id 'com.diffplug.spotless' version '5.12.5'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.version}-${config.build_number}"
group = "vazkii.${config.mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

repositories {
    mavenLocal()
}

base {
    archivesName = config.mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation" << "-Werror"

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
    }
}

repositories {
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:21.1.1"

    implementation "curse.maven:applied-energistics-2-223794:5610903"
}

spotless {
    enforceCheck = false // workaround around jenkins having wrong line endings in some files
    java {
        target project.fileTree(dir: 'src/main/java/vazkii/morphtool', include: '**/*.java')
        //indentWithTabs()
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
        replaceRegex 'Not enough space after if', '(if|for|while|switch)\\(', '$1 ('
    }
}

pmd {
    toolVersion '6.22.0'
    // no way around this warning unless we upgrade Gradle, apparently
    //incrementalAnalysis.set(true)
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

task checkSyntax (group: "verification") {
    dependsOn spotlessJavaCheck, pmdMain
}

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

import java.util.regex.Pattern
task sortArtifacts(type: Copy) {
    from jar.getDestinationDirectory()
    into config.dir_output
    //Put each jar with a classifier in a subfolder with the classifier as its name
    eachFile {
        //This matcher is used to get the classifier of the jar
        def matcher = Pattern.compile(Pattern.quote("$config.mod_name-$version") + "-(?<classifier>\\w+).jar").matcher(it.name)
        //Only change the destination for full matches, i.e jars with classifiers
        if (matcher.matches())
        {
            def classifier = matcher.group('classifier')
            /* Set the relative path to change the destination, since 
             * Gradle doesn't seem to like the absolute path being set*/
            it.relativePath = it.relativePath.parent.append(false, classifier, it.name)
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    //rename the default output, for some better... sanity with scipts
    //archiveName = "${archiveBaseName}-${archiveVersion}.${archiveExtension}"

    manifest {
        attributes([
                "Specification-Title": "${config.mod_id}",
                "Specification-Vendor": "vazkii",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "${config.mod_id}",
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"vazkii",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
}

defaultTasks 'clean', 'build', 'sortArtifacts', 'incrementBuildNumber'
